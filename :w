#include "build/gpc.h"
#include <x86intrin.h>

const char test_string[] =
"Original by Markus Kuhn, adapted for HTML by Martin Dürst.\n\n"
"UTF-8 encoded sample plain-text file\n\n\n"
"Markus Kuhn [ˈmaʳkʊs kuːn] <mkuhn@acm.org> — 1999-08-20\n\n\n"
"The ASCII compatible UTF-8 encoding of ISO 10646 and Unicode\n"
"plain-text files is defined in RFC 2279 and in ISO 10646-1 Annex R.\n\n\n"
"Using Unicode/UTF-8, you can write in emails and source code things such as\n\n"
"Mathematics and Sciences:\n\n"
"  ∮ E⋅da = Q,  n → ∞, ∑ f(i) = ∏ g(i), ∀x∈ℝ: ⌈x⌉ = −⌊−x⌋, α ∧ ¬β = ¬(¬α ∨ β),\n\n"
"  ℕ ⊆ ℕ₀ ⊂ ℤ ⊂ ℚ ⊂ ℝ ⊂ ℂ, ⊥ < a ≠ b ≡ c ≤ d ≪ ⊤ ⇒ (A ⇔ B),\n\n"
"  2H₂ + O₂ ⇌ 2H₂O, R = 4.7 kΩ, ⌀ 200 mm\n\n"
"Linguistics and dictionaries:\n\n"
"  ði ıntəˈnæʃənəl fəˈnɛtık əsoʊsiˈeıʃn\n\n"
"  Y [ˈʏpsilɔn], Yen [jɛn], Yoga [ˈjoːgɑ]\n\n"
"APL:\n\n"
"  ((V⍳V)=⍳⍴V)/V←,V    ⌷←⍳→⍴∆∇⊃‾⍎⍕⌈\n\n"
"Nicer typography in plain text files:\n\n"
"  ╔══════════════════════════════════════════╗ \n"
"  ║                                          ║ \n"
"  ║   • ‘single’ and “double” quotes         ║ \n"
"  ║                                          ║ \n"
"  ║   • Curly apostrophes: “We’ve been here” ║ \n"
"  ║                                          ║ \n"
"  ║   • Latin-1 apostrophe and accents: '´`  ║ \n"
"  ║                                          ║ \n"
"  ║   • ‚deutsche‘ „Anführungszeichen“       ║ \n"
"  ║                                          ║ \n"
"  ║   • †, ‡, ‰, •, 3–4, —, −5/+5, ™, …      ║ \n"
"  ║                                          ║ \n"
"  ║   • ASCII safety test: 1lI|, 0OD, 8B     ║ \n"
"  ║                      ╭─────────╮         ║ \n"
"  ║   • the euro symbol: │ 14.95 € │         ║ \n"
"  ║                      ╰─────────╯         ║ \n"
"  ╚══════════════════════════════════════════╝ \n\n"
"Greek (in Polytonic):\n\n"
"  The Greek anthem:\n\n"
"  Σὲ γνωρίζω ἀπὸ τὴν κόψη\n"
"  τοῦ σπαθιοῦ τὴν τρομερή,\n"
"  σὲ γνωρίζω ἀπὸ τὴν ὄψη\n"
"  ποὺ μὲ βία μετράει τὴ γῆ.\n\n"
"  ᾿Απ᾿ τὰ κόκκαλα βγαλμένη\n"
"  τῶν ῾Ελλήνων τὰ ἱερά\n"
"  καὶ σὰν πρῶτα ἀνδρειωμένη\n"
"  χαῖρε, ὦ χαῖρε, ᾿Ελευθεριά!\n\n"
"  From a speech of Demosthenes in the 4th century BC:\n\n"
"  Οὐχὶ ταὐτὰ παρίσταταί μοι γιγνώσκειν, ὦ ἄνδρες ᾿Αθηναῖοι,\n"
"  ὅταν τ᾿ εἰς τὰ πράγματα ἀποβλέψω καὶ ὅταν πρὸς τοὺς\n"
"  λόγους οὓς ἀκούω· τοὺς μὲν γὰρ λόγους περὶ τοῦ\n"
"  τιμωρήσασθαι Φίλιππον ὁρῶ γιγνομένους, τὰ δὲ πράγματ᾿\n"
"  εἰς τοῦτο προήκοντα,  ὥσθ᾿ ὅπως μὴ πεισόμεθ᾿ αὐτοὶ\n"
"  πρότερον κακῶς σκέψασθαι δέον. οὐδέν οὖν ἄλλο μοι δοκοῦσιν\n"
"  οἱ τὰ τοιαῦτα λέγοντες ἢ τὴν ὑπόθεσιν, περὶ ἧς βουλεύεσθαι,\n"
"  οὐχὶ τὴν οὖσαν παριστάντες ὑμῖν ἁμαρτάνειν. ἐγὼ δέ, ὅτι μέν\n"
"  ποτ᾿ ἐξῆν τῇ πόλει καὶ τὰ αὑτῆς ἔχειν ἀσφαλῶς καὶ Φίλιππον\n"
"  τιμωρήσασθαι, καὶ μάλ᾿ ἀκριβῶς οἶδα· ἐπ᾿ ἐμοῦ γάρ, οὐ πάλαι\n"
"  γέγονεν ταῦτ᾿ ἀμφότερα· νῦν μέντοι πέπεισμαι τοῦθ᾿ ἱκανὸν\n"
"  προλαβεῖν ἡμῖν εἶναι τὴν πρώτην, ὅπως τοὺς συμμάχους\n"
"  σώσομεν. ἐὰν γὰρ τοῦτο βεβαίως ὑπάρξῃ, τότε καὶ περὶ τοῦ\n"
"  τίνα τιμωρήσεταί τις καὶ ὃν τρόπον ἐξέσται σκοπεῖν· πρὶν δὲ\n"
"  τὴν ἀρχὴν ὀρθῶς ὑποθέσθαι, μάταιον ἡγοῦμαι περὶ τῆς\n"
"  τελευτῆς ὁντινοῦν ποιεῖσθαι λόγον.\n\n"
"  Δημοσθένους, Γ´ ᾿Ολυνθιακὸς\n\n"
"Georgian:\n\n"
"  From a Unicode conference invitation:\n\n"
"  გთხოვთ ახლავე გაიაროთ რეგისტრაცია Unicode-ის მეათე საერთაშორისო\n"
"  კონფერენციაზე დასასწრებად, რომელიც გაიმართება 10-12 მარტს,\n"
"  ქ. მაინცში, გერმანიაში. კონფერენცია შეჰკრებს ერთად მსოფლიოს\n"
"  ექსპერტებს ისეთ დარგებში როგორიცაა ინტერნეტი და Unicode-ი,\n"
"  ინტერნაციონალიზაცია და ლოკალიზაცია, Unicode-ის გამოყენება\n"
"  ოპერაციულ სისტემებსა, და გამოყენებით პროგრამებში, შრიფტებში,\n"
"  ტექსტების დამუშავებასა და მრავალენოვან კომპიუტერულ სისტემებში.\n"
"Russian:\n\n"
"  From a Unicode conference invitation:\n\n"
"  Зарегистрируйтесь сейчас на Десятую Международную Конференцию по\n"
"  Unicode, которая состоится 10-12 марта 1997 года в Майнце в Германии.\n"
"  Конференция соберет широкий круг экспертов по  вопросам глобального\n"
"  Интернета и Unicode, локализации и интернационализации, воплощению и\n"
"  применению Unicode в различных операционных системах и программных\n"
"  приложениях, шрифтах, верстке и многоязычных компьютерных системах.\n\n"
"Thai (UCS Level 2):\n\n"
"  Excerpt from a poetry on The Romance of The Three Kingdoms (a Chinese\n"
"  classic 'San Gua'):\n\n"
"  [----------------------------|------------------------]\n"
"    ๏ แผ่นดินฮั่นเสื่อมโทรมแสนสังเวช  พระปกเกศกองบู๊กู้ขึ้นใหม่\n"
"  สิบสองกษัตริย์ก่อนหน้าแลถัดไป       สององค์ไซร้โง่เขลาเบาปัญญา\n"
"    ทรงนับถือขันทีเป็นที่พึ่ง           บ้านเมืองจึงวิปริตเป็นนักหนา\n"
"  โฮจิ๋นเรียกทัพทั่วหัวเมืองมา         หมายจะฆ่ามดชั่วตัวสำคัญ\n"
"    เหมือนขับไสไล่เสือจากเคหา      รับหมาป่าเข้ามาเลยอาสัญ\n"
"  ฝ่ายอ้องอุ้นยุแยกให้แตกกัน          ใช้สาวนั้นเป็นชนวนชื่นชวนใจ\n"
"    พลันลิฉุยกุยกีกลับก่อเหตุ          ช่างอาเพศจริงหนาฟ้าร้องไห้\n"
"  ต้องรบราฆ่าฟันจนบรรลัย           ฤๅหาใครค้ำชูกู้บรรลังก์ ฯ\n\n"
"  (The above is a two-column text. If combining characters are handled\n"
"  correctly, the lines of the second column should be aligned with the\n"
"  | character above.)\n\n"
"Ethiopian:\n"
"  Proverbs in the Amharic language:\n\n"
"  ሰማይ አይታረስ ንጉሥ አይከሰስ።\n"
"  ብላ ካለኝ እንደአባቴ በቆመጠኝ።\n"
"  ጌጥ ያለቤቱ ቁምጥና ነው።\n"
"  ደሀ በሕልሙ ቅቤ ባይጠጣ ንጣት በገደለው።\n"
"  የአፍ ወለምታ በቅቤ አይታሽም።\n"
"  አይጥ በበላ ዳዋ ተመታ።\n"
"  ሲተረጉሙ ይደረግሙ።\n"
"  ቀስ በቀስ፥ ዕንቁላል በእግሩ ይሄዳል።\n"
"  ድር ቢያብር አንበሳ ያስር።\n"
"  ሰው እንደቤቱ እንጅ እንደ ጉረቤቱ አይተዳደርም።\n"
"  እግዜር የከፈተውን ጉሮሮ ሳይዘጋው አይድርም።\n"
"  የጎረቤት ሌባ፥ ቢያዩት ይስቅ ባያዩት ያጠልቅ።\n"
"  ሥራ ከመፍታት ልጄን ላፋታት።\n"
"  ዓባይ ማደሪያ የለው፥ ግንድ ይዞ ይዞራል።\n"
"  የእስላም አገሩ መካ የአሞራ አገሩ ዋርካ።\n"
"  ተንጋሎ ቢተፉ ተመልሶ ባፉ።\n"
"  ወዳጅህ ማር ቢሆን ጨርስህ አትላሰው።\n"
"  እግርህን በፍራሽህ ልክ ዘርጋ።\n"
"Runes:\n\n"
"  ᚻᛖ ᚳᚹᚫᚦ ᚦᚫᛏ ᚻᛖ ᛒᚢᛞᛖ ᚩᚾ ᚦᚫᛗ ᛚᚪᚾᛞᛖ ᚾᚩᚱᚦᚹᛖᚪᚱᛞᚢᛗ ᚹᛁᚦ ᚦᚪ ᚹᛖᛥᚫ\n\n"
"  (Old English, which transcribed into Latin reads 'He cwaeth that he\n"
"  bude thaem lande northweardum with tha Westsae.' and means 'He said\n"
"  that he lived in the northern land near the Western Sea.')\n\n"
"Braille:\n\n"
"  ⡌⠁⠧⠑ ⠼⠁⠒  ⡍⠜⠇⠑⠹⠰⠎ ⡣⠕⠌\n\n"
"  ⡍⠜⠇⠑⠹ ⠺⠁⠎ ⠙⠑⠁⠙⠒ ⠞⠕ ⠃⠑⠛⠔ ⠺⠊⠹⠲ ⡹⠻⠑ ⠊⠎ ⠝⠕ ⠙⠳⠃⠞\n"
"  ⠱⠁⠞⠑⠧⠻ ⠁⠃⠳⠞ ⠹⠁⠞⠲ ⡹⠑ ⠗⠑⠛⠊⠌⠻ ⠕⠋ ⠙⠊⠎ ⠃⠥⠗⠊⠁⠇ ⠺⠁⠎\n"
"  ⠎⠊⠛⠝⠫ ⠃⠹ ⠹⠑ ⠊⠇⠻⠛⠹⠍⠁⠝⠂ ⠹⠑ ⠊⠇⠻⠅⠂ ⠹⠑ ⠥⠝⠙⠻⠞⠁⠅⠻⠂\n"
"  ⠁⠝⠙ ⠹⠑ ⠡⠊⠑⠋ ⠍⠳⠗⠝⠻⠲ ⡎⠊⠗⠕⠕⠛⠑ ⠎⠊⠛⠝⠫ ⠊⠞⠲ ⡁⠝⠙\n"
"  ⡎⠊⠗⠕⠕⠛⠑⠰⠎ ⠝⠁⠍⠑ ⠺⠁⠎ ⠛⠕⠕⠙ ⠥⠏⠕⠝ ⠰⡡⠁⠝⠛⠑⠂ ⠋⠕⠗ ⠁⠝⠹⠹⠔⠛ ⠙⠑\n"
"  ⠡⠕⠎⠑ ⠞⠕ ⠏⠥⠞ ⠙⠊⠎ ⠙⠁⠝⠙ ⠞⠕⠲\n\n"
"  ⡕⠇⠙ ⡍⠜⠇⠑⠹ ⠺⠁⠎ ⠁⠎ ⠙⠑⠁⠙ ⠁⠎ ⠁ ⠙⠕⠕⠗⠤⠝⠁⠊⠇⠲\n\n"
"  ⡍⠔⠙⠖ ⡊ ⠙⠕⠝⠰⠞ ⠍⠑⠁⠝ ⠞⠕ ⠎⠁⠹ ⠹⠁⠞ ⡊ ⠅⠝⠪⠂ ⠕⠋ ⠍⠹\n"
"  ⠪⠝ ⠅⠝⠪⠇⠫⠛⠑⠂ ⠱⠁⠞ ⠹⠻⠑ ⠊⠎ ⠏⠜⠞⠊⠊⠥⠇⠜⠇⠹ ⠙⠑⠁⠙ ⠁⠃⠳⠞\n"
"  ⠁ ⠙⠕⠕⠗⠤⠝⠁⠊⠇⠲ ⡊ ⠍⠊⠣⠞ ⠙⠁⠧⠑ ⠃⠑⠲ ⠔⠊⠇⠔⠫⠂ ⠍⠹⠎⠑⠇⠋⠂ ⠞⠕\n"
"  ⠗⠑⠛⠜⠙ ⠁ ⠊⠕⠋⠋⠔⠤⠝⠁⠊⠇ ⠁⠎ ⠹⠑ ⠙⠑⠁⠙⠑⠌ ⠏⠊⠑⠊⠑ ⠕⠋ ⠊⠗⠕⠝⠍⠕⠝⠛⠻⠹\n"
"  ⠔ ⠹⠑ ⠞⠗⠁⠙⠑⠲ ⡃⠥⠞ ⠹⠑ ⠺⠊⠎⠙⠕⠍ ⠕⠋ ⠳⠗ ⠁⠝⠊⠑⠌⠕⠗⠎\n"
"  ⠊⠎ ⠔ ⠹⠑ ⠎⠊⠍⠊⠇⠑⠆ ⠁⠝⠙ ⠍⠹ ⠥⠝⠙⠁⠇⠇⠪⠫ ⠙⠁⠝⠙⠎\n"
"  ⠩⠁⠇⠇ ⠝⠕⠞ ⠙⠊⠌⠥⠗⠃ ⠊⠞⠂ ⠕⠗ ⠹⠑ ⡊⠳⠝⠞⠗⠹⠰⠎ ⠙⠕⠝⠑ ⠋⠕⠗⠲ ⡹⠳\n"
"  ⠺⠊⠇⠇ ⠹⠻⠑⠋⠕⠗⠑ ⠏⠻⠍⠊⠞ ⠍⠑ ⠞⠕ ⠗⠑⠏⠑⠁⠞⠂ ⠑⠍⠏⠙⠁⠞⠊⠊⠁⠇⠇⠹⠂ ⠹⠁⠞\n"
"  ⡍⠜⠇⠑⠹ ⠺⠁⠎ ⠁⠎ ⠙⠑⠁⠙ ⠁⠎ ⠁ ⠙⠕⠕⠗⠤⠝⠁⠊⠇⠲\n\n"
"  (The first couple of paragraphs of \"A Christmas Carol\" by Dickens)\n\n"
"Compact font selection example text:\n\n"
"  ABCDEFGHIJKLMNOPQRSTUVWXYZ /0123456789\n"
"  abcdefghijklmnopqrstuvwxyz £©µÀÆÖÞßéöÿ\n"
"  –—‘“”„†•…‰™œŠŸž€ ΑΒΓΔΩαβγδω АБВГДабвгд\n"
"  ∀∂∈ℝ∧∪≡∞ ↑↗↨↻⇣ ┐┼╔╘░►☺♀ ﬁ�⑀₂ἠḂӥẄɐː⍎אԱა\n\n"
"Greetings in various languages:\n\n"
"  Hello world, Καλημέρα κόσμε, コンニチハ\n\n"
"Box drawing alignment tests:                                          █\n"
"                                                                      ▉\n"
"  ╔══╦══╗  ┌──┬──┐  ╭──┬──╮  ╭──┬──╮  ┏━━┳━━┓  ┎┒┏┑   ╷  ╻ ┏┯┓ ┌┰┐    ▊ ╱╲╱╲╳╳╳\n"
"  ║┌─╨─┐║  │╔═╧═╗│  │╒═╪═╕│  │╓─╁─╖│  ┃┌─╂─┐┃  ┗╃╄┙  ╶┼╴╺╋╸┠┼┨ ┝╋┥    ▋ ╲╱╲╱╳╳╳\n"
"  ║│╲ ╱│║  │║   ║│  ││ │ ││  │║ ┃ ║│  ┃│ ╿ │┃  ┍╅╆┓   ╵  ╹ ┗┷┛ └┸┘    ▌ ╱╲╱╲╳╳╳\n"
"  ╠╡ ╳ ╞╣  ├╢   ╟┤  ├┼─┼─┼┤  ├╫─╂─╫┤  ┣┿╾┼╼┿┫  ┕┛┖┚     ┌┄┄┐ ╎ ┏┅┅┓ ┋ ▍ ╲╱╲╱╳╳╳\n"
"  ║│╱ ╲│║  │║   ║│  ││ │ ││  │║ ┃ ║│  ┃│ ╽ │┃  ░░▒▒▓▓██ ┊  ┆ ╎ ╏  ┇ ┋ ▎\n"
"  ║└─╥─┘║  │╚═╤═╝│  │╘═╪═╛│  │╙─╀─╜│  ┃└─╂─┘┃  ░░▒▒▓▓██ ┊  ┆ ╎ ╏  ┇ ┋ ▏\n"
"  ╚══╩══╝  └──┴──┘  ╰──┴──╯  ╰──┴──╯  ┗━━┻━━┛           └╌╌┘ ╎ ┗╍╍┛ ┋  ▁▂▃▄▅▆▇█\n";

static size_t gp_utf8_encode_with_loop(uint32_t* encoding, const void*const _u8, const size_t i)
{
    const GPString u8 = (GPString)_u8;
    *encoding = 0;
    const size_t codepoint_length = gp_utf8_codepoint_length(u8, i);
    for (size_t j = 0; j < codepoint_length; j++) // TODO try if unrolling improves performance
        *encoding = (*encoding << 8) | u8[i + j].c;

    if (*encoding > 0x7F) {
        uint32_t mask =  (*encoding <= 0x00EFBFBF) ? 0x000F0000 : 0x003F0000;
        *encoding     = ((*encoding  & 0x07000000) >> 6)        |
                        ((*encoding  &       mask) >> 4)        |
                        ((*encoding  & 0x00003F00) >> 2)        |
                         (*encoding  & 0x0000003F)              ;
    }
    return codepoint_length;
}

static size_t gp_utf8_encode_unrolled(uint32_t* encoding, const void*const _u8, const size_t i)
{
    const GPString u8 = (GPString)_u8;
    *encoding = 0;
    const size_t codepoint_length = gp_utf8_codepoint_length(u8, i);
    //for (size_t j = 0; j < codepoint_length; j++) // TODO try if unrolling improves performance
    //    *encoding = (*encoding << 8) | u8[i + j].c;
    switch (codepoint_length) {
        case 4: *encoding = (*encoding << 8) | u8[i + 0].c;
        case 3: *encoding = (*encoding << 8) | u8[i + 1].c;
        case 2: *encoding = (*encoding << 8) | u8[i + 2].c;
        case 1: *encoding = (*encoding << 8) | u8[i + 3].c;
    }

    if (*encoding > 0x7F) {
        uint32_t mask =  (*encoding <= 0x00EFBFBF) ? 0x000F0000 : 0x003F0000;
        *encoding     = ((*encoding  & 0x07000000) >> 6)        |
                        ((*encoding  &       mask) >> 4)        |
                        ((*encoding  & 0x00003F00) >> 2)        |
                         (*encoding  & 0x0000003F)              ;
    }
    return codepoint_length;
}

int main(void)
{
    uint32_t loop_out    [sizeof test_string];
    uint32_t unrolled_out[sizeof test_string];

    volatile const uint64_t t_loop0 = __rdtsc();
    for (size_t i = 0; i < sizeof test_string - sizeof""; ++i)
        gp_utf8_encode_with_loop(loop_out + i, test_string, i);
    volatile const uint64_t t_loop1 = __rdtsc();

    volatile const uint64_t t_unrolled0 = __rdtsc();
    for (size_t i = 0; i < sizeof test_string - sizeof""; ++i)
        gp_utf8_encode_unrolled(unrolled_out + i, test_string, i);
    volatile const uint64_t t_unrolled1 = __rdtsc();
}
